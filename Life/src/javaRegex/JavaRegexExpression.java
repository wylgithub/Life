package javaRegex;

/**
 * 学习Java中常用的正则表达式的使用
 * @author Administrator
 *
 */

/**
 * 一、正则表达式: 

	1、正则表达式定义了字符串的模式；
	
	2、 正则表达式可以用来定义，编辑和处理字符串。
	
	3、 正则表达式并不限定某一种语言，但是在不同的语言中都有细微的差别；
	
	4、 Java的正则表达式和Perl的正则表达式最为相似；
	
	5、 java的正则表达式的定义主要在java.util.regex内，包含了以下三个类：
		1), Pattern类：
			pattern对象是一个正则表达式的编译表示。Pattern类没有一个公共的构造方法，，要创建一个Pattern对象，你必须首先调用其
			公共静态编译方法。该方法接受一个正则表达式作为他的参数。
		
		2), Matcher类：
			Matcher对象是对输入字符串进行解释和匹配操作的引擎，与pattern类一样，matcher也没有公共的构造方法。，你需要调用Pattern
			对象的matcher方法来获得一个matcher对象。
			
		
		3), PatternSyntaxException:
			PatternSyntaxException是一个非强制异常类，它表示一个正则表达式模式中的语法错误。
		
二、 捕获组
		捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。
		例如，正则表达式(dog) 创建了单一分组，组里包含"d"，"o"，和"g"。
		捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：
		((A)(B(C)))
		(A)
		(B(C))
		(C)
		可以通过调用matcher对象的groupCount方法来查看表达式有多少个分组。groupCount方法返回一个int值，表示matcher对象当前有多个捕获组。
		还有一个特殊的组（组0），它总是代表整个表达式。该组不包括在groupCount的返回值中。	

三、 java正则表达式里面用到的一些匹配符号解释：
	
	1， "\": 将下一个字符标记为特殊字符，文本，反响引用或者八进制转义符。例如，"n"匹配字符"n"。"\n"匹配换行符。
		序列"\\"匹配"\"，"\("匹配"("。
	
	2， "^": 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与"\n"或"\r"之后的
		位置匹配。
		
	4， "$": 匹配字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与"\n"或"\r"之前的位置匹配。
	
	5， "*": 零次或者多次匹配前面出现的字符或者子表达式。例如，zo* 匹配"z"和"zoo"。* 等效于 {0,}。 
	
	6， "+": 一次或者多次匹配前面出现的字符或者子表达式；例如，"zo+"与"zo"和"zoo"匹配，但与"z"不匹配。+ 等效于 {1,}。
	
	7， "?": 零次或者一次匹配前面出现的字符或者子表达式。例如，"do(es)?"匹配"do"或"does"中的"do"。? 等效于 {0,1}。
	
	8， "{n}": n 是非负整数。正好匹配 n 次。例如，"o{2}"与"Bob"中的"o"不匹配，但与"food"中的两个"o"匹配。
	
	9， "{n,}": n 是非负整数。至少匹配 n 次。例如，"o{2,}"不匹配"Bob"中的"o"，而匹配"foooood"中的所有 o。
		"o{1,}"等效于"o+"。"o{0,}"等效于"o*"。 
	
	10, "{n,m}": M 和 n 是非负整数，其中 n <= m。匹配至少 n 次，至多 m 次。例如，"o{1,3}"匹配"fooooood"
		中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。 
		
	11, "?": 当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是"非贪心的"。"非贪心的"模式匹
		配搜索到的、尽可能短的字符串，而默认的"贪心的"模式匹配搜索到的、尽可能长的字符串。例如，在字符串"oooo"中，"o+?"
		只匹配单个"o"，而"o+"匹配所有"o"。 
		
	12, ".": 匹配除"\r\n"之外的任何单个字符。若要匹配包括"\r\n"在内的任意字符，请使用诸如"[\s\S]"之类的模式。
	
	 
	 13, "{pattern}": 匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果"匹配"集合中检索捕获的匹配。
	 	若要匹配括号字符 ( )，请使用"\("或者"\)"。 
	 
	 14, "{?:pattern}":  匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。
	 	这对于用"or"字符 (|) 组合模式部件的情况很有用。例如，'industr(?:y|ies) 是比 'industry|industries' 
	 	更经济的表达式。
	 	
	 15, "(?=pattern)": 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。
	 	它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95|98|NT|2000)' 匹配"Windows 20
	 	00"中的"Windows"，但不匹配"Windows 3.1"中的"Windows"。预测先行不占用字符，即发生匹配后，下一匹配的搜
	 	索紧随上一匹配之后，而不是在组成预测先行的字符后。
	 
	 16， "?!pattern)": 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串
	 	。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95|98|NT|2000)' 匹配"Windows 3.1"
	 	中的 "Windows"，但不匹配"Windows 2000"中的"Windows"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随
	 	上一匹配之后，而不是在组成预测先行的字符后。 
	 	
	 17, "x|y": 匹配 x 或 y。例如，'z|food' 匹配"z"或"food"。'(z|f)ood' 匹配"zood"或"food"。
	 
	 18, "[xyz]": 字符集。匹配包含的任一字符。例如，"[abc]"匹配"plain"中的"a"。
	 
	 19, "[^xyz]" : 反向字符集。匹配未包含的任何字符。例如，"[^abc]"匹配"plain"中"p"，"l"，"i"，"n"。
	 
	 20, "[a-z]": 字符范围。匹配指定范围内的任何字符。例如，"[a-z]"匹配"a"到"z"范围内的任何小写字母。
	 
	 21, "[^a-z]": 反向范围字符。匹配不在指定的范围内的任何字符。例如，"[^a-z]"匹配任何不在"a"到"z"范围内的任何字符。
	 
	 22, "\b": 匹配一个字边界，即字与空格间的位置。例如，"er\b"匹配"never"中的"er"，但不匹配"verb"中的"er"。
	 
	 23, "\B": 非字边界匹配。"er\B"匹配"verb"中的"er"，但不匹配"never"中的"er"。
	 
	 24, "\cx": 匹配 x 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，
	 	则假定 c 就是"c"字符本身。
	 
	 25, "\d": 数字字符匹配。等效于 [0-9]。
	 
	 26, "\D": 非数字字符匹配。等效于 [^0-9]。
	 
	 27, "\f": 换页符匹配。等效于 \x0c 和 \cL。
	 
	 28, "\n": 换行符匹配。等效于 \x0a 和 \cJ。
	 
	 29, "\r": 匹配一个回车符。等效于 \x0d 和 \cM。
	 
	 30, "\s": 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。
	 
	 31, "\S": 匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。
	 
	 32, "\t": 制表符匹配。与 \x09 和 \cI 等效。
	 
	 33, "\v": 垂直制表符匹配。与 \x0b 和 \cK 等效。
	 
	 34, "\w": 匹配任何字类字符，包括下划线。与"[A-Za-z0-9_]"等效。
	 
	 35, "\W": 与任何非单词字符匹配。与"[^A-Za-z0-9_]"等效。
	 
	 36, "\xn": 匹配 n，此处的 n 是一个十六进制转义码。十六进制转
	 	义码必须正好是两位数长。例如，"\x41"匹配"A"。"\x041"与"\x04"&"1"等效。允许在正则表达式中使用 ASCII 代码。
	 	
	 37, "\num": 匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用。例如，"(.)\1"匹配两个连续的相同字符。
	 
	 38, "\n": 标识一个八进制转义码或反向引用。如果 \n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如
	 	果 n 是八进制数 (0-7)，那么 n 是八进制转义码。
	 	
	 39, "\nm": 标识一个八进制转义码或反向引用。如果 \nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \nm 
	 	前面至少有 n 个捕获，则 n 是反向引用，后面跟有字符 m。如果两种前面的情况都不存在，则 \nm 匹配八进制值 nm，其中 n
	 	 和 m 是八进制数字 (0-7)。
	 40, "\nml": 当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，匹配八进制转义码 nml。
 * @author Administrator
 *
 */
public class JavaRegexExpression {

	
}
